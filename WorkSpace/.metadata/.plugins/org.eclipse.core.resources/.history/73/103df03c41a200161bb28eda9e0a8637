package com.egou.search.lucene;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
//import org.apache.lucene.document.DoubleField;
//import org.apache.lucene.document.IntField;
//import org.apache.lucene.document.LongField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.TrackingIndexWriter;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.ControlledRealTimeReopenThread;
//import org.apache.lucene.search.FieldCache;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.NumericRangeQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ReferenceManager;
import org.apache.lucene.search.ScoreDoc;
//import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.SearcherFactory;
import org.apache.lucene.search.SearcherManager;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;
//import org.apache.lucene.search.Sort;
//import org.apache.lucene.search.SortField;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TopDocs;
//import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.search.WildcardQuery;
//import org.apache.lucene.search.highlight.Formatter;
//import org.apache.lucene.search.highlight.Fragmenter;
//import org.apache.lucene.search.highlight.Highlighter;
//import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;
//import org.apache.lucene.search.highlight.QueryScorer;
//import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
//import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.util.Version;
//import org.springframework.beans.factory.annotation.Autowired;
import org.wltea.analyzer.core.IKSegmenter;
import org.wltea.analyzer.core.Lexeme;



//import com.egou.search.service.ILuceneSerive;
import com.egou.search.vo.ProductIndex;
import com.egou.search.vo.SearchProductParam;
import com.egou.utils.DateUtils;
import com.egou.utils.ObjectUtils;
import com.egou.utils.ParseHelper;
import com.github.pagehelper.PageInfo;

public class LuceneSearch extends LuceneCommon {

	public LuceneSearch() {
	}

	/**
	 * 创建索引查询 IndexSearch
	 * 
	 * @throws IOException
	 **/
	public IndexSearcher getSearcher() throws IOException {
		if (directory == null)
			directory = new FileIndexUtils().getDirectory();
		reader = DirectoryReader.open(directory);// 读取目录
		IndexSearcher is = new IndexSearcher(reader);
		;
		return is;
	}

	public PageInfo<ProductIndex> search(SearchProductParam param ,int pageIndex,int pageSize) throws IOException{
		PageInfo<ProductIndex>  result=new PageInfo<ProductIndex>();
		IndexSearcher is = getSearcher();
		// ----------设置过滤器------------------------------------------------
		BooleanQuery booleanquery = new BooleanQuery();
		BooleanQuery hitQuery = new BooleanQuery();

		if (stopWordSet == null || stopWordSet.size() <= 0)
			initStopWord();
		if(param==null){
			param=new SearchProductParam();
		}
		if(param.getCateOne()!=null){
			Query subquery = NumericRangeQuery.newIntRange("cate1", param.getCateOne(), param.getCateOne(), true, true);
			booleanquery.add(subquery, Occur.MUST);
		}
		if(param.getCateTwo()!=null){
			Query subquery = NumericRangeQuery.newIntRange("cate2", param.getCateTwo(), param.getCateTwo(), true, true);
			booleanquery.add(subquery, Occur.MUST);
		}
		if(param.getCateThree()!=null){
			Query subquery = NumericRangeQuery.newIntRange("cate3", param.getCateThree(), param.getCateThree(), true, true);
			booleanquery.add(subquery, Occur.MUST);
		}
		if(param.getBrandid()!=null){
			Query subquery = NumericRangeQuery.newIntRange("brandid", param.getBrandid().intValue(), param.getBrandid().intValue(), true, true);
			booleanquery.add(subquery, Occur.MUST);
		}
		if (!ObjectUtils.isEmpty(param.getTitle())) {
			// 创建分词对象
			StringReader sr = new StringReader(param.getTitle());
			IKSegmenter ik = new IKSegmenter(sr, false);
			Lexeme lex = null;
			while ((lex = ik.next()) != null) {
				// 去除停用词
				if (stopWordSet.contains(lex.getLexemeText())) {
					continue;
				}
				Query likequery = new TermQuery(new Term("title", lex.getLexemeText()));
				hitQuery.add(likequery, Occur.SHOULD);
				if (!param.getTitle().equals(lex.getLexemeText()))
					likequery.setBoost(0.0f);
				booleanquery.add(likequery, Occur.SHOULD);
			}
		} else {
			Query likequery = new WildcardQuery(new Term("title", "*"));
			booleanquery.add(likequery, Occur.MUST);
		}
		SortField sortf = new SortField("id", SortField.Type.INT, true);
		Sort sort = new Sort(new SortField[] { new SortField(null, SortField.Type.SCORE, false), sortf });
		TopDocs topDocs = is.search(booleanquery, 2000000, sort); // 搜索相似度最高的N条记录
		ScoreDoc[] docs = topDocs.scoreDocs;
		// is.search(booleanquery, topCollector);
		// 查询结果的总数量
		// int totalNum = topCollector.getTotalHits();
		int totalNum = topDocs.totalHits;
		int begin = pageSize * (pageIndex - 1);
		int end = Math.min(begin + pageSize, docs.length);

		List<ProductIndex> resultList = new ArrayList<ProductIndex>();
		for (int i = begin; i < end; i++) {
			ScoreDoc scdoc = docs[i];
			Document document = is.doc(scdoc.doc);
			ProductIndex index = new ProductIndex();
			index.setProductid(ParseHelper.toLong(document.get("id")));
			index.setTitle(document.get("title"));
			// index.setTitle(document.get("createtime"));
			resultList.add(index);
		}
		reader.close();// 关闭资源
		directory.close();// 关闭连接

//		return resultList;
		return result;
	}
	/**
	 * 搜索
	 * @param text
	 * @param pageIndex
	 * @param pageSize
	 * @return
	 * @throws IOException
	 */
	public List<ProductIndex> search(String text, int pageIndex, int pageSize) throws IOException {
		IndexSearcher is = getSearcher();
		// ----------设置过滤器------------------------------------------------
		BooleanQuery booleanquery = new BooleanQuery();
		BooleanQuery hitQuery = new BooleanQuery();

		if (stopWordSet == null || stopWordSet.size() <= 0)
			initStopWord();

		if (!ObjectUtils.isEmpty(text)) {
			// 创建分词对象
			StringReader sr = new StringReader(text);
			IKSegmenter ik = new IKSegmenter(sr, false);
			Lexeme lex = null;

			while ((lex = ik.next()) != null) {
				// 去除停用词
				if (stopWordSet.contains(lex.getLexemeText())) {
					continue;
				}
				Query likequery = new TermQuery(new Term("title", lex.getLexemeText()));
				hitQuery.add(likequery, Occur.SHOULD);
				if (!text.equals(lex.getLexemeText()))
					likequery.setBoost(0.0f);
				booleanquery.add(likequery, Occur.SHOULD);
			}
		} else {
			Query likequery = new WildcardQuery(new Term("title", "*"));
			booleanquery.add(likequery, Occur.MUST);
		}
		SortField sortf = new SortField("id", SortField.Type.INT, true);
		Sort sort = new Sort(new SortField[] { new SortField(null, SortField.Type.SCORE, false), sortf });
		TopDocs topDocs = is.search(booleanquery, 2000000, sort); // 搜索相似度最高的N条记录
		ScoreDoc[] docs = topDocs.scoreDocs;
		// is.search(booleanquery, topCollector);
		// 查询结果的总数量
		// int totalNum = topCollector.getTotalHits();
		int totalNum = topDocs.totalHits;
		int begin = pageSize * (pageIndex - 1);
		int end = Math.min(begin + pageSize, docs.length);

		List<ProductIndex> resultList = new ArrayList<ProductIndex>();
		for (int i = begin; i < end; i++) {
			ScoreDoc scdoc = docs[i];
			Document document = is.doc(scdoc.doc);
			ProductIndex index = new ProductIndex();
			index.setProductid(ParseHelper.toLong(document.get("id")));
			index.setTitle(document.get("title"));
			// index.setTitle(document.get("createtime"));
			resultList.add(index);
		}
		reader.close();// 关闭资源
		directory.close();// 关闭连接

		return resultList;
	}

}
