package com.egou.search.lucene;

import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.document.LongField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.queryparser.classic.QueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;
import org.apache.lucene.search.SortField.Type;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.util.Version;
import org.wltea.analyzer.lucene.IKAnalyzer;

import com.egou.bean.PProduct;
import com.egou.utils.AppSettingUtil;

public class CreateLuceneIndex {
	
	public static void indexProduct(PProduct index)
	{
		File indexDir = new File(AppSettingUtil.getSingleValue("luceneIndex"));

		Analyzer analyzer = new IKAnalyzer();

//		TextField postIdField = new TextField("id", ID, Store.YES); // 不要用StringField
//		TextField postContentField = new TextField("content", content,
//				Store.YES);
		
		Document doc = new Document();
		doc.add(new LongField("id", index.getProductid(), Store.YES));
//		doc.add(new StringField("suptype",index.getSupType(),Store.YES));
		doc.add(new LongField("createtime",new Date().getTime(),Store.YES));
		IndexWriterConfig iwConfig = new IndexWriterConfig(
				Version.LUCENE_4_10_4, analyzer);
		if(index.getType()==(short)0) //新增
		{
			iwConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE);
		}
		else//更新
		{
			iwConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
		}
		try {
			Directory fsDirectory = FSDirectory.open(indexDir);
			IndexWriter indexWriter = new IndexWriter(fsDirectory, iwConfig);
			indexWriter.addDocument(doc);
			indexWriter.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void indexPost(String ID, String content) {
		File indexDir = new File(AppSettingUtil.getSingleValue("luceneIndex"));

		Analyzer analyzer = new IKAnalyzer();

		TextField postIdField = new TextField("id", ID, Store.YES); // 不要用StringField
		TextField postContentField = new TextField("content", content,
				Store.YES);
		Document doc = new Document();
		doc.add(postIdField);
		doc.add(postContentField);
		doc.add(new LongField("createtime",new Date().getTime(),Store.YES));
		IndexWriterConfig iwConfig = new IndexWriterConfig(
				Version.LUCENE_4_10_4, analyzer);
		iwConfig.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);
		try {
			Directory fsDirectory = FSDirectory.open(indexDir);
			IndexWriter indexWriter = new IndexWriter(fsDirectory, iwConfig);
			indexWriter.addDocument(doc);
			indexWriter.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static SearchResultBean searchPost(String text,int pageindex,int pagesize) {
		SearchResultBean sb= new SearchResultBean();		
		Analyzer analyzer = new IKAnalyzer();
		File indexDir = new File(AppSettingUtil.getSingleValue("luceneIndex"));
		try {
			Directory fsDirectory = FSDirectory.open(indexDir);
			DirectoryReader ireader = DirectoryReader.open(fsDirectory);
			IndexSearcher isearcher = new IndexSearcher(ireader);
			Sort sort=new Sort(new SortField("createtime", Type.LONG, false));
			QueryParser qp = new QueryParser("content", analyzer); // 使用QueryParser查询分析器构造Query对象
			qp.setDefaultOperator(QueryParser.AND_OPERATOR);
			Query query = qp.parse(text); // 搜索Lucene
			
			TopDocs topDocs = isearcher.search(query, 1000,sort); // 搜索相似度最高的N条记录
			 //查询起始记录位置
	        int begin = pagesize * (pageindex - 1);	    
	        sb.setTotalHits(topDocs.totalHits);
			System.out.println("命中:" + topDocs.totalHits);
	        
			ScoreDoc[] scoreDocs = topDocs.scoreDocs;
			//查询终止记录位置
	        int end = Math.min(begin + pagesize, scoreDocs.length);
	        List<Map<String,Object>> lists= new ArrayList<Map<String,Object>>();
			for (int i = begin; i < end; i++) {
				Map<String,Object> map= new  HashMap<String,Object>();
				Document targetDoc = isearcher.doc(scoreDocs[i].doc);
				System.out.println("内容:" + targetDoc.toString());
				System.out.println("具体内容："+targetDoc.get("id"));
				map.put("productid", targetDoc.get("id"));
				lists.add(map);
				
			}
			sb.setDocs(lists);
			return sb;
		} catch (Exception e) {
			return null;
		}

	}
}
