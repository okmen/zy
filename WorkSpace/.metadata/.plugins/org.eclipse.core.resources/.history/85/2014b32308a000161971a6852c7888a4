package com.okwei.lucene;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.DoubleField;
import org.apache.lucene.document.IntField;
import org.apache.lucene.document.LongField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.TrackingIndexWriter;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.ControlledRealTimeReopenThread;
import org.apache.lucene.search.FieldCache;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.NumericRangeQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ReferenceManager;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.SearcherFactory;
import org.apache.lucene.search.SearcherManager;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.search.WildcardQuery;
import org.apache.lucene.search.highlight.Formatter;
import org.apache.lucene.search.highlight.Fragmenter;
import org.apache.lucene.search.highlight.Highlighter;
import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;
import org.apache.lucene.search.highlight.QueryScorer;
import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.util.Version;
import org.springframework.beans.factory.annotation.Autowired;
import org.wltea.analyzer.core.IKSegmenter;
import org.wltea.analyzer.core.Lexeme;

import com.okwei.model.PProducts;
import com.okwei.service.JobService;
import com.okwei.util.BitOperation;
import com.okwei.util.ImgDomain;
import com.okwei.util.ParseHelper;
import com.okwei.vo.LuceneData;
import com.okwei.vo.SearchProductInfo;


public class NearRealTimeSearch {
	private static Version Lucene_Version = Version.LUCENE_4_10_4;
	
	@Autowired
	private JobService service;
	
	private Directory directory = null;
	private IndexWriter writer = null;

	/** nrt init **/
	private TrackingIndexWriter trackingIndexWriter = null;
	private ReferenceManager<IndexSearcher> reMgr = null;// 类似于Lucene3.x中的NrtManager
	private ControlledRealTimeReopenThread<IndexSearcher> crt = null;
	private Log logger = LogFactory.getLog(this.getClass());   
	private String stopWordTable="";
	private  Set<String> stopWordSet=null;
	// 数据初始化
	public NearRealTimeSearch() {

	}

	public void initStopWord()
	{
		try
		{
			//读入停用词文件  
	        BufferedReader StopWordFileBr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(stopWordTable)))); 
			 //用来存放停用词的集合  
	        stopWordSet = new HashSet<String>();  
	        //初如化停用词集  
	        String stopWord = null;  
	        for(; (stopWord = StopWordFileBr.readLine()) != null;){  
	            stopWordSet.add(stopWord);  
	        }  	       
	        //关闭流  
	        StopWordFileBr.close(); 	
		}
		catch(Exception ex)
		{
			
		}
	}
	
	public void init() {
		if (crt == null)
		{
			try 
			{
				initStopWord();
				stopWordTable=getClass().getClassLoader().getResource("ChineseStopWord.txt").getPath() ;
				directory = new  FileIndexUtils().getDirectory();	
				if(IndexWriter.isLocked(directory))
					IndexWriter.unlock(directory);
				writer = new IndexWriter(directory, new IndexWriterConfig(Lucene_Version, AnalyzerUtil.getIkAnalyzer()));				
				trackingIndexWriter = new TrackingIndexWriter(writer);
				reMgr = new SearcherManager(writer, true, new SearcherFactory());
				/** 在0.025s~5.0s之间重启一次线程，这个是时间的最佳实践 **/
				crt = new ControlledRealTimeReopenThread<>(trackingIndexWriter,
						reMgr, 5.0, 0.025);
				crt.setDaemon(true);// 设置为后台服务
				crt.setName("Index update to disk");// 线程名称
				crt.start();// 线程启动

			} catch (Exception e) {
				logger.error("Lucene初始化失败："+e.getMessage());
				
				e.printStackTrace();
			}
		}
	}

	/**
	 * 定期提交内存中得索引到硬盘上，防止丢失
	 */
	public void commit() {
		try {
			writer.commit();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 建立索引 要实现search nrt,需要使用TrackIndexWriter保存document，同时Writer也不需要关闭。
	 * 
	 * **/
	public void index(List<LuceneData> ids) throws IOException {

		try {
			for (int i = 0; i < ids.size(); i++) 
			{
				Document doc = new Document();
				LuceneData ldata = ids.get(i);
				try 
				{					
					doc.add(new StringField("id", ldata.getId().toString(), Store.YES)); //productid
					doc.add(new LongField("supWeiID", ldata.getSupWeiID()==null?0L:ldata.getSupWeiID(),Store.YES));//供应商id
					doc.add(new TextField("content", ldata.getProtitle(),Store.YES)); //产品标题
					doc.add(new TextField("supWeiName", ldata.getSupWeiName(),Store.YES)); //供应商名称
					doc.add(new StringField("supType", ldata.getSupType()==null?"":ldata.getSupType(),Store.YES)); //供应商类型
					// 存储数字
					doc.add(new IntField("btypeid", ldata.getBigtype(), Store.YES));//一级分类
					doc.add(new IntField("mtypeid", ldata.getMediatype(), Store.YES));//二级分类
					doc.add(new IntField("stypeid", ldata.getSmalltype(), Store.YES));//三级分类
					doc.add(new IntField("brandid", ldata.getBrandid(), Store.YES));//品牌ID
					
					doc.add(new IntField("marketId",ldata.getMarketId(),Store.YES));
					doc.add(new IntField("sellType", ldata.getSellType(),Store.YES));
					doc.add(new IntField("yu", ldata.getYu(), Store.YES));
					doc.add(new IntField("pi", ldata.getPi(), Store.YES));
					doc.add(new IntField("ling",ldata.getLing(),Store.YES));
					doc.add(new LongField("hot", ldata.getHot()==null?0L:ldata.getHot(), Store.YES));
					// 存储日期
					doc.add(new StringField("createTime", ldata.getCreateTime()+"",Store.YES));
					doc.add(new IntField("clickPoint", ldata.getClickPoint()==null ? 0:Integer.parseInt(ldata.getClickPoint().toString()),Store.YES));
					doc.add(new DoubleField("defaultPrice", ldata.getDefaultPrice()==null?0.0:ldata.getDefaultPrice(), Store.YES));
					doc.add(new DoubleField("defaultCommision", ldata.getDefaultCommision()==null?0.0:ldata.getDefaultCommision(), Store.YES));
					doc.add(new DoubleField("startPrice",ldata.getStartPrice()==null?0.0:ldata.getStartPrice(), Store.YES));
					doc.add(new DoubleField("endPrice", ldata.getEndPrice()==null?0.0:ldata.getEndPrice(),Store.YES));
					doc.add(new IntField("totalCount", ldata.getSellCount(), Store.YES));
					doc.add(new IntField("evaluateCount", ldata.getEvaluateCount(), Store.YES));
					doc.add(new IntField("shelvesCount", ldata.getShelvesCount(), Store.YES));
					if(trackingIndexWriter==null)
					{
						logger.warn("Lucene创建索引时异常，trackingIndexWriter为空！");
						init();
					}
					trackingIndexWriter.addDocument(doc);
				} 
				catch (Exception ex)
				{
//					System.out.println(ex.getMessage());
					logger.error("Lucene创建索引时异常:"+ex.getMessage());
					service.insertErrorIndex(ldata.getId(),(short)0);
					continue;
				}
			}
		} finally {
			commit();// 首次创建，提交索引,只有提交后，才会在索引片段中也将信息改变
			
		}

	}

	/*** 查询 **/
	public void query() {
		IndexSearcher is = getSearcher();
		try {
			// 通过reader可以有效的获取到文档的数量
			System.out.println("numDocs:" + is.getIndexReader().numDocs());
			System.out.println("maxDocs:" + is.getIndexReader().maxDoc());
			System.out.println("deleteDocs:"
					+ is.getIndexReader().numDeletedDocs());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				reMgr.release(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 删除 使用trackIndexWriter进行数据删除，也不需要关闭Writer
	 * **/
	public void delete(String productid) {
		try {			
			
			trackingIndexWriter.deleteDocuments(new Term("id", productid));
		} catch (Exception e) {
			logger.error("Lucene删除索引时异常:"+e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * 修改 使用trackIndexWriter进行修改，不需要关闭writer
	 * **/
	public void update(LuceneData ldata) {
		try {
			Document doc = new Document();
			/*
			 * Lucene并没有提供更新，这里的更新操作其实是如下两个操作的合集 先删除之后再添加
			 */
			doc.add(new StringField("id", ldata.getId().toString(), Store.YES)); //productid
			doc.add(new LongField("supWeiID", ldata.getSupWeiID()==null?0L:ldata.getSupWeiID(),Store.YES));//供应商id
			doc.add(new TextField("content", ldata.getProtitle(),Store.YES)); //产品标题
			doc.add(new TextField("supWeiName", ldata.getSupWeiName(),Store.YES)); //供应商名称
			doc.add(new StringField("supType", ldata.getSupType()==null?"":ldata.getSupType(),Store.YES)); //供应商类型
			// 存储数字
			doc.add(new IntField("btypeid", ldata.getBigtype(), Store.YES));//一级分类
			doc.add(new IntField("mtypeid", ldata.getMediatype(), Store.YES));//二级分类
			doc.add(new IntField("stypeid", ldata.getSmalltype(), Store.YES));//三级分类
			doc.add(new IntField("brandid", ldata.getBrandid(), Store.YES));//品牌ID
			
			doc.add(new IntField("marketId",ldata.getMarketId(),Store.YES));
			doc.add(new IntField("sellType", ldata.getSellType(),Store.YES));
			doc.add(new IntField("yu", ldata.getYu(), Store.YES));
			doc.add(new IntField("pi", ldata.getPi(), Store.YES));
			doc.add(new IntField("ling",ldata.getLing(),Store.YES));
			doc.add(new LongField("hot", ldata.getHot()==null?0L:ldata.getHot(), Store.YES));
			// 存储日期
			doc.add(new StringField("createTime", ldata.getCreateTime()+"",Store.YES));
			doc.add(new IntField("clickPoint", ldata.getClickPoint()==null ? 0:Integer.parseInt(ldata.getClickPoint().toString()),Store.YES));
			doc.add(new DoubleField("defaultPrice", ldata.getDefaultPrice()==null?0.0:ldata.getDefaultPrice(), Store.YES));
			doc.add(new DoubleField("defaultCommision", ldata.getDefaultCommision()==null?0.0:ldata.getDefaultCommision(), Store.YES));
			doc.add(new DoubleField("startPrice",ldata.getStartPrice()==null?0.0:ldata.getStartPrice(), Store.YES));
			doc.add(new DoubleField("endPrice", ldata.getEndPrice()==null?0.0:ldata.getEndPrice(),Store.YES));
			doc.add(new IntField("totalCount", ldata.getSellCount(), Store.YES));
			doc.add(new IntField("evaluateCount", ldata.getEvaluateCount(), Store.YES));
			doc.add(new IntField("shelvesCount", ldata.getShelvesCount(), Store.YES));
			
			trackingIndexWriter.updateDocument(new Term("id", ldata.getId().toString()), doc);
		} catch (Exception e) {
			logger.error("Lucene更新索引时异常:"+e.getMessage());
			service.insertErrorIndex(ldata.getId(),(short)1);
			e.printStackTrace();
		}
	}

	public  Map<String, Object>   searchHitCount(String text, String sweiName,int btype,int mtype,int stype,Double startprice,Double endprice,
			String where,String wheretype,String marketId,int brandid, Integer page, Integer pageSize)
	{
		IndexSearcher is = getSearcher();
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			// ----------设置过滤器------------------------------------------------
			BooleanQuery booleanquery = new BooleanQuery();
			BooleanQuery hitQuery= new BooleanQuery();
			 if(stopWordSet == null || stopWordSet.size()<=0)
				 initStopWord();
	        //创建分词对象  
	        StringReader sr=new StringReader(text);    
	        IKSegmenter ik=new IKSegmenter(sr, false);    
	        Lexeme lex=null;    
	        //分词  	        
	        if(text.length()>0)
	        {
		        while((lex=ik.next())!=null){  
		            //去除停用词  
		            if(stopWordSet.contains(lex.getLexemeText())) {  
		                continue;  
		            }  
		            Query likequery = new TermQuery(new Term("content",lex.getLexemeText()));
					booleanquery.add(likequery, Occur.SHOULD);
					hitQuery.add(likequery, Occur.SHOULD);   
		        }   
	        }
	        else
	        {
	        	Query likequery= new WildcardQuery(new Term("content","*"));
	        	booleanquery.add(likequery,Occur.MUST);
	        }
	        
	        //店铺搜索
	        if(sweiName!=null &&!"".equals(sweiName)&&sweiName.length()>0)
	        {
	        	Query likequery = new TermQuery(new Term("supWeiName",sweiName));
				booleanquery.add(likequery, Occur.SHOULD);
				hitQuery.add(likequery, Occur.SHOULD);  
	        }
	        if(startprice !=null || endprice !=null)
	        {
	        	if(startprice == null)
	        		startprice=0.0;
	        	if(endprice == null)
	        		endprice = 0.0;
	        	Query subquery = NumericRangeQuery.newDoubleRange("defaultPrice", startprice,  endprice, true, true);
				booleanquery.add(subquery, Occur.MUST);
	        }
			// 一级分类 （查询条件2）
			if (btype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("btypeid", btype,  btype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 二级分类
			if (mtype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("mtypeid", mtype,  mtype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			//三级分类
			if(stype>0)
			{
				Query subquery = NumericRangeQuery.newIntRange("stypeid", stype,  stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if(brandid>0)
			{
				Query subquery = NumericRangeQuery.newIntRange("brandid", stype,  stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			//查询市场id
			if (marketId.length() > 0) {
				Query subquery = NumericRangeQuery.newIntRange("marketId", Integer.parseInt(marketId),  Integer.parseInt(marketId), true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if("yu".equals(wheretype)) //支持预定
			{
				Query subquery = NumericRangeQuery.newIntRange("yu",1,  1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if("pi".equals(wheretype)) //支持批发
			{
				Query subquery =  NumericRangeQuery.newIntRange("pi",1,  1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}	
			TopDocs topDocs = is.search(booleanquery, 2000,null);  // 搜索相似度最高的N条记录
			int totalNum=topDocs.totalHits;
			map.put("totalCount", totalNum);
			map.put("totalPage", totalNum / pageSize
					+ (totalNum % pageSize == 0 ? 0 : 1));
			map.put("pageIndex", page);
			map.put("pageSize", pageSize);
			return map;
		} catch (IOException e) {
			logger.error("Lucene查询时异常，查询条件:"+text+",大类:"+btype+",小类："+stype+";"+e.getMessage());
			e.printStackTrace();
			return null;
		} finally {
			try {
				reMgr.release(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	/**
	 * 查询
	 * 
	 * 查询时search如果使用完成，需要将search释放会searchFactory中，使用reMgr。release(indexSearcher)
	 * 进行释放 text 搜索字段 bigtype 主大类 subtype 小类名称 page 当前页 pageSize 每页行数
	 * **/
	public Map<String, Object> search(String text, String sweiName,int btype,int mtype,int stype,Double startprice,Double endprice,
			String where,String wheretype,String marketId,int brandid, Integer page, Integer pageSize) {
		IndexSearcher is = getSearcher();
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			// ----------设置过滤器------------------------------------------------
			BooleanQuery booleanquery = new BooleanQuery();
			BooleanQuery hitQuery= new BooleanQuery();
			// 综合查询 （查询条件1）
//			String[] strs=text.split(" ");
//			for(int i=0;i<strs.length;i++)
//			{
//				if(i==0)
//				{
//					if(" ".equals(strs[i]))
//						continue;
//					Query likequery = new TermQuery(new Term("content", strs[i]));
//					MyCustomScoreQuery myQuery = new MyCustomScoreQuery(likequery);
//					booleanquery.add(myQuery, Occur.MUST);
//					hitQuery.add(myQuery, Occur.MUST);
//				}
//				if(" ".equals(strs[i]))
//					continue;
//				Query likequery = new FuzzyQuery(new Term("content", strs[i]));
//				MyCustomScoreQuery myQuery = new MyCustomScoreQuery(likequery);
//				booleanquery.add(myQuery, Occur.SHOULD);
//				hitQuery.add(myQuery, Occur.SHOULD);
//			}
			if(stopWordSet == null || stopWordSet.size()<=0)
				 initStopWord();
			//创建分词对象  
	        StringReader sr=new StringReader(text);    
	        IKSegmenter ik=new IKSegmenter(sr, false);    
	        Lexeme lex=null;    
	        //分词  
	        
	        if(text.length()>0)
	        {
	        	Query squery= new TermQuery(new Term("content",text));	
	        	hitQuery.add(squery, Occur.SHOULD);
	        	squery.setBoost(1000000.0f);
	        	booleanquery.add(squery, Occur.SHOULD);
	        	
		        while((lex=ik.next())!=null){  
		            //去除停用词  
		            if(stopWordSet.contains(lex.getLexemeText())) {  
		                continue;  
		            }  
		            Query likequery = new TermQuery(new Term("content",lex.getLexemeText()));
		            hitQuery.add(likequery, Occur.SHOULD);
		            if(!text.equals(lex.getLexemeText()))
		            	likequery.setBoost(0.0f);
					booleanquery.add(likequery, Occur.SHOULD);
					   
		        }   
	        }
	        else
	        {
	        	Query likequery= new WildcardQuery(new Term("content","*"));
	        	booleanquery.add(likequery,Occur.MUST);
	        }
	        
	        
	        //店铺搜索
	        if(sweiName!=null &&!"".equals(sweiName)&&sweiName.length()>0)
	        {
	        	Query likequery = new TermQuery(new Term("supWeiName",sweiName));
				booleanquery.add(likequery, Occur.SHOULD);
				hitQuery.add(likequery, Occur.SHOULD);  
	        }
			
//			for(String str:strs)
//			{
//				if(" ".equals(str))
//					continue;
//				Query likequery = new FuzzyQuery(new Term("content", str));
//				MyCustomScoreQuery myQuery = new MyCustomScoreQuery(likequery);
//				booleanquery.add(myQuery, Occur.SHOULD);
//			}
//			Query likequery = new FuzzyQuery(new Term("content", text));
//			MyCustomScoreQuery myQuery = new MyCustomScoreQuery(likequery);
//			booleanquery.add(myQuery, Occur.MUST);
	        
	        if(startprice !=null || endprice !=null)
	        {
	        	if(startprice==0.0 || endprice==0.0)
	        	{
	        		
	        	}
	        	else
	        	{
		        	if(startprice == null)
		        		startprice=0.0;
		        	if(endprice == null)
		        		endprice = 0.0;
		        	Query subquery = NumericRangeQuery.newDoubleRange("defaultPrice", startprice,  endprice, true, true);
					booleanquery.add(subquery, Occur.MUST);
	        	}
	        }

			// 一级分类 （查询条件2）
			if (btype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("btypeid", btype,  btype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 二级分类
			if (mtype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("mtypeid", mtype,  mtype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if(stype>0)
			{
				Query subquery = NumericRangeQuery.newIntRange("stypeid", stype,  stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if(brandid>0)
			{
				Query subquery = NumericRangeQuery.newIntRange("brandid", stype,  stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			//查询市场id
			if (marketId.length() > 0) {
				Query subquery = NumericRangeQuery.newIntRange("marketId", Integer.parseInt(marketId),  Integer.parseInt(marketId), true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if("yu".equals(wheretype)) //支持预定
			{
				Query subquery = NumericRangeQuery.newIntRange("yu",1,  1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if("pi".equals(wheretype)) //支持批发
			{
				Query subquery =  NumericRangeQuery.newIntRange("pi",1,  1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			
			
//			TopDocs tds = is.search(booleanquery, 2000000);
			// -------------搜索--------------------------------------------------------
			// 分页查询,lucene不支持分页查询，因为查询速度很快，所以我们就设置查询上限
//			TopScoreDocCollector topCollector = TopScoreDocCollector.create(
//					page * pageSize, false);// 上限
			
//			Sort sort =new Sort(new SortField("clickPoint", Type.LONG, true));
			//ture 倒序  false 升序
//			Sort sort = new Sort();//创建排序
//			SortField sortf = new SortField("createTime", FieldCache.DEFAULT_LONG_PARSER, true); 
			SortField sortf=new SortField("createTime", SortField.Type.INT, true);
//			SortField sortf=new SortField("defaultPrice", SortField.Type.DOUBLE, false);//排序规则
			if("aprice".equals(where)) //排序价格由低到高
			{
				sortf=new SortField("defaultPrice", SortField.Type.DOUBLE, false);//排序规则
			}
			if("dprice".equals(where)) //排序价格由高到
			{
				sortf=new SortField("defaultPrice", SortField.Type.DOUBLE, true);//排序规则
			}
			 if("dcreatetime".equals(where))//排序时间由新到旧
			{
				 sortf=new SortField("createTime", SortField.Type.INT, true);
			}
			 if("acreatetime".equals(where))//排序时间由旧到新
			{
				 sortf=new SortField("createTime", SortField.Type.INT, false);
			}
			 if("dcount".equals(where))
			 {
				 sortf=new SortField("totalCount", SortField.Type.INT, true);
			 }
			 if("acount".equals(where))//数量由低到高
			 {
				 sortf=new SortField("totalCount", SortField.Type.INT, false);
			 }
			 if("acommision".equals(where)) //排序价格由低到高
			{
				sortf=new SortField("defaultCommision", SortField.Type.DOUBLE, false);//排序规则
			}
			if("dcommision".equals(where)) //排序价格由高到
			{
				sortf=new SortField("defaultCommision", SortField.Type.DOUBLE, true);//排序规则
			}
//			SortField sortf=new SortField("totalCount", SortField.Type.INT, false);
			
//			sort.setSort(sortf);
			Sort sort = new Sort(new SortField[]{new SortField(null,SortField.Type.SCORE,false),sortf});  
			TopDocs topDocs = is.search(booleanquery, 2000000,sort);  // 搜索相似度最高的N条记录
//			is.search(booleanquery, topCollector);
			// 查询结果的总数量
//			int totalNum = topCollector.getTotalHits();
			int totalNum=topDocs.totalHits;
			map.put("totalCount", totalNum);
			map.put("totalPage", totalNum / pageSize
					+ (totalNum % pageSize == 0 ? 0 : 1));
			map.put("pageIndex", page);
			map.put("pageSize", pageSize);
			
//			ScoreDoc[] docs = topCollector.topDocs((page - 1) * pageSize,
//					pageSize).scoreDocs;// 返回所需数据
			ScoreDoc[] docs = topDocs.scoreDocs;
			QueryScorer qs= new QueryScorer(hitQuery); 
			//设置高亮标签
	        Formatter formatter = new SimpleHTMLFormatter("<font color='red'>", "</font>");
	         //高亮分析器
	        Highlighter hl = new Highlighter(formatter, qs);
	         
	         Fragmenter fragmenter = new SimpleSpanFragmenter(qs);
	         hl.setTextFragmenter(fragmenter);
			ArrayList<SearchProductInfo> list = new ArrayList<SearchProductInfo>();
			SearchProductInfo data = null;
//			for (ScoreDoc scdoc : docs) {
			//查询起始记录位置
	        int begin = pageSize * (page - 1);	 
	        int end = Math.min(begin + pageSize, docs.length);
			for (int i = begin; i < end; i++) {
				ScoreDoc scdoc=docs[i];
				Document document = is.doc(scdoc.doc);
				data = new SearchProductInfo();
				// 设置高壳
				String outline = document.get("content");

				try {
					outline=hl.getBestFragment(AnalyzerUtil.getIkAnalyzer(), "content",outline);
				} catch (InvalidTokenOffsetsException e) {
					e.printStackTrace();
				}
				if (outline == null)
					outline = document.get("content");
				PProducts pp=service.getPProductsById(Long.parseLong(document.get("id")));	
				if(pp==null)
					continue;
				data.setEndPrice(Double.parseDouble(document.get("endPrice")));
				data.setStartPrice(Double.parseDouble(document.get("startPrice")));	
				data.setTitle(outline);				
				data.setImage(ImgDomain.GetFullImgUrl(pp.getDefaultImg(), 24));
				data.setKeyWord(text);
				data.setProductId(pp.getProductId());
				String supType=document.get("supType");
				data.setSupType(supType);
				data.setSupWeiId(pp.getSupplierWeiId());
				String supName=service.getSupWeiName(pp.getSupplierWeiId());
				if("".equals(supName))
					data.setSupWeiName(document.get("supWeiName"));
				else
					data.setSupWeiName(supName);
				int yu = ParseHelper.toInt(document.get("yu"),0);
				List<String> ls = new ArrayList<String>();
				if (yu==1) {
					ls.add("http://base3.okimgs.com/images/1-3-1_07.png"); //预
				} 
				int pi = ParseHelper.toInt(document.get("pi"),0);
				if (pi==1) {
					ls.add("http://base3.okimgs.com/images/1-3-1_09.png");//批
				}				
				data.setImages(ls);	
				Short shtype=(short)0;
				if(!"".equals(supType))
					shtype=Short.parseShort(supType);
				String supTypeimg="";
				if(BitOperation.getIntegerSomeBit(shtype,2)==1)
				{
					
					supTypeimg="http://base3.okimgs.com/images/1-3-1_1322.png";
				}
				if(BitOperation.getIntegerSomeBit(shtype,1)==1)
				{
					supTypeimg="http://base3.okimgs.com/images/1-3-1_03.png";
				}
				data.setSupTypeImg(supTypeimg);
				list.add(data);
			}
			map.put("spList", list);
			return map;
		} catch (IOException e) {
			logger.error("Lucene查询时异常，查询条件:"+text+",大类:"+btype+",小类："+stype+";"+e.getMessage());
			e.printStackTrace();
			return null;
		} finally {
			try {
				reMgr.release(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}





	/** 使用单例获取IndexSearch **/
	public IndexSearcher getSearcher() {
		IndexSearcher is = null;
		try {
			if (is == null) {
				reMgr.maybeRefresh();// 刷新reMgr,获取最新的IndexSearcher
				is = reMgr.acquire();

			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (is == null) {
			logger.error("Lucene初始化IndexSearcher时异常");
			throw new RuntimeException("indexSearcher is null!!!!");
		}
		return is;

	}

	/**
	 * 关闭初始化线程的处理
	 */
	public void close() {
		// stop the re-open thread
		//关闭流  
		crt.interrupt();
		crt.close();
		
		// close the indexWriter,commit 所有有过修改的内容
		try {
			writer.commit();
			writer.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
