package com.egou.search.web;

import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.egou.bean.PProduct;
import com.egou.bean.PProductcate;
import com.egou.bean.PSearchkeyword;
import com.egou.dao.PSearchkeywordMapper;
import com.egou.search.service.ICommonService;
import com.egou.search.service.ILuceneSerive;
import com.egou.search.service.impl.ths.ThreadCreateIndex;
import com.egou.search.vo.ProductIndex;
import com.egou.search.vo.SearchProductParam;
import com.egou.utils.JsonUtils;
import com.egou.utils.ParseHelper;
import com.egou.vo.product.SearchParam;
import com.github.pagehelper.PageInfo;

@Controller
@RequestMapping(value = "/search")
public class SearchController implements Runnable{

	@Resource(name = "luceneService")
	ILuceneSerive productDao;

	@Resource(name = "commonService")
	private ICommonService cateService;

	@Autowired
	private PSearchkeywordMapper searchDao;

	@Autowired
	private HttpServletRequest request;

	ILuceneSerive proDao;
	
	int i = 1;

	public SearchController(ILuceneSerive productDao2) {
		// TODO Auto-generated constructor stub
		proDao=productDao2;
	}





	@ResponseBody
	@RequestMapping(value = "/createIndex", method = { RequestMethod.POST, RequestMethod.GET })
	public String createIndex(@RequestParam(required = false, defaultValue = "0") int type, @RequestParam(required = false, defaultValue = "1") int index, @RequestParam(required = false, defaultValue = "1000") int size) throws Exception {
		SearchParam param = new SearchParam();
		index = 1;
		size = 1000;
		long time1 = new Date().getTime();
		PageInfo<PProduct> pageInfo = cateService.find_PProductslist(param, index, size);
		if (type == 0) {
			if (pageInfo.getList() != null && pageInfo.getList().size() > 0) {
				for (; index <= 4; index++) {// pageInfo.getPages()
					PageInfo<PProduct> list = cateService.find_PProductslist(null, index, size);
					if (list.getList() != null && list.getList().size() > 0) {
						productDao.createIndex(list.getList());
					}
				}
			}
		} else {
			
//			threadCIndex.create(size);
			new ThreadCreateIndex().create(size); 
		}
		long time2 = new Date().getTime();
		return JsonUtils.objectToJson(index * size + "条数据处理完,花时：" + (time2 - time1));
	}
	


	

	/**
	 * lucene搜索 查询
	 * 
	 * @param title
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/search", method = { RequestMethod.POST, RequestMethod.GET })
	public String search(String title, @RequestParam(required = false, defaultValue = "1") int index, @RequestParam(required = false, defaultValue = "10") int size) throws Exception {
		params = new SearchProductParam();
		params.setTitle(title);
		
		PageInfo<ProductIndex> pageInfo = productDao.searchProducts(params, index, size);
		SearchController th=new SearchController(productDao);
		Thread t1=new Thread(th,"a");
		Thread t2=new Thread(th,"b");
		t1.start();
		t2.start();
		return JsonUtils.objectToJson(pageInfo);
	}
	int index=1;
	SearchProductParam params;
	@Override
	public void run() {
		synchronized (this) {
			 try {
				 proDao.searchProducts(params, index, 10);
				System.out.println(Thread.currentThread().getName() + " synchronized loop " + index);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				
			
		}
	}
	@ResponseBody
	@RequestMapping(value = "/keyword", method = { RequestMethod.POST, RequestMethod.GET })
	public String addKeyWord(String key) throws Exception {
		cateService.addKeyWord(key);
		return JsonUtils.objectToJson("");
	}

	@ResponseBody
	@RequestMapping(value = "/getkeys", method = { RequestMethod.POST, RequestMethod.GET })
	public String getkeys(String key) throws Exception {
		List<PSearchkeyword> list = cateService.find_keys(key);
		return JsonUtils.objectToJson(list);
	}

	/**
	 * 测试
	 * 
	 * @param title
	 * @param index
	 * @param size
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/test", method = { RequestMethod.POST, RequestMethod.GET })
	public String test(String title, @RequestParam(required = false, defaultValue = "1") int index, @RequestParam(required = false, defaultValue = "10") int size, String catename, String parent, String step) throws Exception {
		// SearchParam param=new SearchParam();
		// param.setTitle(title);
		// PageInfo<PProduct> pageInfo =productDao.find_PProductslist(param,
		// index,size);
		PProductcate cate = new PProductcate();
		cate.setCatename(catename);
		cate.setStep(ParseHelper.toInt(step));
		cate.setParentid(ParseHelper.toInt(parent));
		cateService.addProductCate(cate);
		return JsonUtils.objectToJson("cc");
	}

	/**
	 * 拿取 okwei产品数据
	 * 
	 * @param index
	 * @param size
	 * @return
	 * @throws Exception
	 */
	@ResponseBody
	@RequestMapping(value = "/proInit", method = { RequestMethod.POST, RequestMethod.GET })
	public String proInit(@RequestParam(required = false, defaultValue = "1") int index, @RequestParam(required = false, defaultValue = "10") int size) throws Exception {
		int tem = 338;
		for (int i = 1; i < tem; i++) {
			productDao.insertInit(1, 1000);
		}
		return JsonUtils.objectToJson("222");
	}

}
