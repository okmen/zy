package com.egou.search.lucene;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
//import org.apache.lucene.document.DoubleField;
//import org.apache.lucene.document.IntField;
//import org.apache.lucene.document.LongField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.document.Field.Store;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.index.TrackingIndexWriter;
import org.apache.lucene.search.BooleanClause.Occur;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.ControlledRealTimeReopenThread;
//import org.apache.lucene.search.FieldCache;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.NumericRangeQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.ReferenceManager;
import org.apache.lucene.search.ScoreDoc;
//import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.SearcherFactory;
import org.apache.lucene.search.SearcherManager;
import org.apache.lucene.search.Sort;
import org.apache.lucene.search.SortField;
//import org.apache.lucene.search.Sort;
//import org.apache.lucene.search.SortField;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.TopDocs;
//import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.search.WildcardQuery;
//import org.apache.lucene.search.highlight.Formatter;
//import org.apache.lucene.search.highlight.Fragmenter;
//import org.apache.lucene.search.highlight.Highlighter;
//import org.apache.lucene.search.highlight.InvalidTokenOffsetsException;
//import org.apache.lucene.search.highlight.QueryScorer;
//import org.apache.lucene.search.highlight.SimpleHTMLFormatter;
//import org.apache.lucene.search.highlight.SimpleSpanFragmenter;
import org.apache.lucene.store.Directory;
import org.apache.lucene.util.Version;
//import org.springframework.beans.factory.annotation.Autowired;
import org.wltea.analyzer.core.IKSegmenter;
import org.wltea.analyzer.core.Lexeme;








//import com.egou.search.service.ILuceneSerive;
import com.egou.search.vo.ProductIndex;
import com.egou.utils.ParseHelper;

public class NearRealTimeSearch {
	private static Version Lucene_Version = Version.LUCENE_4_10_4;

	// @Autowired
	// private ILuceneSerive service;

	private Directory directory = null;
	private IndexWriter writer = null;

	/** nrt init **/
	private TrackingIndexWriter trackingIndexWriter = null;
	private ReferenceManager<IndexSearcher> reMgr = null;// 绫讳技浜嶭ucene3.x涓殑NrtManager
	private ControlledRealTimeReopenThread<IndexSearcher> crt = null;
	private Log logger = LogFactory.getLog(this.getClass());
	private String stopWordTable = "";
	private Set<String> stopWordSet = null;

	// 鏁版嵁鍒濆鍖�
	public NearRealTimeSearch() {

	}

	public void initStopWord() {
		try {
			// 读入停用词文件
			BufferedReader StopWordFileBr = new BufferedReader(new InputStreamReader(new FileInputStream(new File(stopWordTable))));
			// 用来存放停用词的集合
			stopWordSet = new HashSet<String>();
			// 初如化停用词集
			String stopWord = null;
			for (; (stopWord = StopWordFileBr.readLine()) != null;) {
				stopWordSet.add(stopWord);
			}
			// 关闭流
			StopWordFileBr.close();
		} catch (Exception ex) {

		}
	}

	public void init() {
		if (crt == null) {
			try {
				initStopWord();
				stopWordTable = getClass().getClassLoader().getResource("ChineseStopWord.txt").getPath();
				directory = new FileIndexUtils().getDirectory();
				if (IndexWriter.isLocked(directory)) {
					IndexWriter.unlock(directory);
				}
				// Analyzer analyzer=new StandardAnalyzer(Version.LUCENE_46);
				writer = new IndexWriter(directory, new IndexWriterConfig(Lucene_Version, AnalyzerUtil.getIkAnalyzer()));
				trackingIndexWriter = new TrackingIndexWriter(writer);
				reMgr = new SearcherManager(writer, true, new SearcherFactory());
				/** 在0.025s~5.0s之间重启一次线程，这个是时间的最佳实践 **/
				crt = new ControlledRealTimeReopenThread<>(trackingIndexWriter, reMgr, 5.0, 0.025);
				crt.setDaemon(true);// 设置为后台服务
				crt.setName("Index update to disk");// 线程名称
				crt.start();// 线程启动

			} catch (Exception e) {
//				logger.error("Lucene初始化失败：" + e.getMessage());
				System.out.println("Lucene初始化失败：" + e.getMessage());
				e.printStackTrace();
			}
		}
	}

	/**
	 * 瀹氭湡鎻愪氦鍐呭瓨涓緱绱㈠紩鍒扮‖鐩樹笂锛岄槻姝涪澶�
	 */
	public void commit() {
		try {
			writer.commit();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 建立索引 要实现search nrt,需要使用TrackIndexWriter保存document，同时Writer也不需要关闭。
	 * 
	 * **/
	public void index(List<ProductIndex> ids) throws IOException {

		try {
			if (ids == null || ids.size() <= 0)
				return;
			for (int i = 0; i < ids.size(); i++) {
				Document doc = new Document();
				ProductIndex ldata = ids.get(i);
				try {
					doc.add(new StringField("id", ldata.getProductid().toString(), Store.YES));
					doc.add(new TextField("content", ldata.getTitle(), Store.YES));

					if (trackingIndexWriter == null) {
						// logger.warn("Lucene创建索引时异常，trackingIndexWriter为空");
						System.out.println("Lucene创建索引时异常，trackingIndexWriter为空");
						init();
					}
					trackingIndexWriter.addDocument(doc);
				} catch (Exception ex) {
					// logger.error("Lucene创建索引时异常:" + ex.getMessage());
					System.out.println("Lucene创建索引时异常:" + ex.getMessage());
					continue;
				}
			}
		} finally {
			commit();// 首次创建，提交索引,只有提交后，才会在索引片段中也将信息改变
		}

	}

	/*** 鏌ヨ **/
	public void query() {
		IndexSearcher is = getSearcher();
		try {
			// 閫氳繃reader鍙互鏈夋晥鐨勮幏鍙栧埌鏂囨。鐨勬暟閲�
			System.out.println("numDocs:" + is.getIndexReader().numDocs());
			System.out.println("maxDocs:" + is.getIndexReader().maxDoc());
			System.out.println("deleteDocs:" + is.getIndexReader().numDeletedDocs());
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				reMgr.release(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * 鍒犻櫎 浣跨敤trackIndexWriter杩涜鏁版嵁鍒犻櫎锛屼篃涓嶉渶瑕佸叧闂璚riter
	 * **/
	public void delete(String productid) {
		try {

			trackingIndexWriter.deleteDocuments(new Term("id", productid));
		} catch (Exception e) {
			logger.error("Lucene鍒犻櫎绱㈠紩鏃跺紓甯�:" + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * 淇敼 浣跨敤trackIndexWriter杩涜淇敼锛屼笉闇�瑕佸叧闂瓀riter
	 * **/
	public void update(ProductIndex ldata) {
		try {
			Document doc = new Document();
			/*
			 * Lucene骞舵病鏈夋彁渚涙洿鏂帮紝杩欓噷鐨勬洿鏂版搷浣滃叾瀹炴槸濡備笅涓や釜鎿嶄綔鐨勫悎闆� 鍏堝垹闄や箣鍚庡啀娣诲姞
			 */
			doc.add(new StringField("id", ldata.getProductid().toString(), Store.YES)); // productid
			doc.add(new TextField("content", ldata.getTitle(), Store.YES)); // 浜у搧鏍囬

			trackingIndexWriter.updateDocument(new Term("id", ldata.getProductid().toString()), doc);
		} catch (Exception e) {
			logger.error("Lucene鏇存柊绱㈠紩鏃跺紓甯�:" + e.getMessage());
			e.printStackTrace();
		}
	}

	public Map<String, Object> searchHitCount(String text, String sweiName, int btype, int mtype, int stype, Double startprice, Double endprice, String where, String wheretype, String marketId, int brandid, Integer page, Integer pageSize) {
		IndexSearcher is = getSearcher();
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			// ----------璁剧疆杩囨护鍣�------------------------------------------------
			BooleanQuery booleanquery = new BooleanQuery();
			BooleanQuery hitQuery = new BooleanQuery();
			if (stopWordSet == null || stopWordSet.size() <= 0)
				initStopWord();
			// 鍒涘缓鍒嗚瘝瀵硅薄
			StringReader sr = new StringReader(text);
			IKSegmenter ik = new IKSegmenter(sr, false);
			Lexeme lex = null;
			// 鍒嗚瘝
			if (text.length() > 0) {
				while ((lex = ik.next()) != null) {
					// 鍘婚櫎鍋滅敤璇�
					if (stopWordSet.contains(lex.getLexemeText())) {
						continue;
					}
					Query likequery = new TermQuery(new Term("content", lex.getLexemeText()));
					booleanquery.add(likequery, Occur.SHOULD);
					hitQuery.add(likequery, Occur.SHOULD);
				}
			} else {
				Query likequery = new WildcardQuery(new Term("content", "*"));
				booleanquery.add(likequery, Occur.MUST);
			}

			// 搴楅摵鎼滅储
			if (sweiName != null && !"".equals(sweiName) && sweiName.length() > 0) {
				Query likequery = new TermQuery(new Term("supWeiName", sweiName));
				booleanquery.add(likequery, Occur.SHOULD);
				hitQuery.add(likequery, Occur.SHOULD);
			}
			if (startprice != null || endprice != null) {
				if (startprice == null)
					startprice = 0.0;
				if (endprice == null)
					endprice = 0.0;
				Query subquery = NumericRangeQuery.newDoubleRange("defaultPrice", startprice, endprice, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 涓�绾у垎绫� 锛堟煡璇㈡潯浠�2锛�
			if (btype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("btypeid", btype, btype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 浜岀骇鍒嗙被
			if (mtype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("mtypeid", mtype, mtype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 涓夌骇鍒嗙被
			if (stype > 0) {
				Query subquery = NumericRangeQuery.newIntRange("stypeid", stype, stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if (brandid > 0) {
				Query subquery = NumericRangeQuery.newIntRange("brandid", stype, stype, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			// 鏌ヨ甯傚満id
			if (marketId.length() > 0) {
				Query subquery = NumericRangeQuery.newIntRange("marketId", Integer.parseInt(marketId), Integer.parseInt(marketId), true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if ("yu".equals(wheretype)) // 鏀寔棰勫畾
			{
				Query subquery = NumericRangeQuery.newIntRange("yu", 1, 1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			if ("pi".equals(wheretype)) // 鏀寔鎵瑰彂
			{
				Query subquery = NumericRangeQuery.newIntRange("pi", 1, 1, true, true);
				booleanquery.add(subquery, Occur.MUST);
			}
			TopDocs topDocs = is.search(booleanquery, 2000, null); // 鎼滅储鐩镐技搴︽渶楂樼殑N鏉¤褰�
			int totalNum = topDocs.totalHits;
			map.put("totalCount", totalNum);
			map.put("totalPage", totalNum / pageSize + (totalNum % pageSize == 0 ? 0 : 1));
			map.put("pageIndex", page);
			map.put("pageSize", pageSize);
			return map;
		} catch (IOException e) {
			logger.error("Lucene鏌ヨ鏃跺紓甯革紝鏌ヨ鏉′欢:" + text + ",澶х被:" + btype + ",灏忕被锛�" + stype + ";" + e.getMessage());
			e.printStackTrace();
			return null;
		} finally {
			try {
				reMgr.release(is);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/** 使用单例获取IndexSearch 
	 * @throws IOException **/
	public IndexSearcher getSearcher() throws IOException { 
		if(directory==null)
			directory = new FileIndexUtils().getDirectory();
		IndexReader reader = DirectoryReader.open(directory);//读取目录 
		IndexSearcher is = new IndexSearcher(reader);;
		try {
			if (is == null) {
				reMgr.maybeRefresh();// 刷新reMgr,获取最新的IndexSearcher
				is = reMgr.acquire();

			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (is == null) {
			logger.error("Lucene初始化IndexSearcher时异常");
			throw new RuntimeException("indexSearcher is null!!!!");
		}
		return is;

	}

	/**
	 * 
	 */
	public void close() {
		crt.interrupt();
		crt.close();

		try {
			writer.commit();
			writer.close();

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public List<ProductIndex> search(String text ,int pageIndex,int pageSize) throws IOException {
		IndexSearcher is = getSearcher();
		BooleanQuery booleanquery = new BooleanQuery();
		BooleanQuery hitQuery = new BooleanQuery();

		if (stopWordSet == null || stopWordSet.size() <= 0)
			initStopWord();
		// 创建分词对象
		StringReader sr = new StringReader(text);
		IKSegmenter ik = new IKSegmenter(sr, false);
		Lexeme lex = null;
		
		if (text.length() > 0) {
			Query squery = new TermQuery(new Term("content", text));
			hitQuery.add(squery, Occur.SHOULD);
			squery.setBoost(1000000.0f);
			booleanquery.add(squery, Occur.SHOULD);
			lex = ik.next();
			while (lex != null) { 
				// 去除停用词
				if (stopWordSet.contains(lex.getLexemeText())) {
					continue;
				}
				Query likequery = new TermQuery(new Term("content", lex.getLexemeText()));
				hitQuery.add(likequery, Occur.SHOULD);
				if (!text.equals(lex.getLexemeText()))
					likequery.setBoost(0.0f);
				booleanquery.add(likequery, Occur.SHOULD);

			}
		} else {
			Query likequery = new WildcardQuery(new Term("content", "*"));
			booleanquery.add(likequery, Occur.MUST);
		}
		SortField sortf = new SortField("id", SortField.Type.INT, true);
		Sort sort = new Sort(new SortField[] { new SortField(null, SortField.Type.SCORE, false), sortf });
		TopDocs topDocs = is.search(booleanquery, 2000000, sort); // 搜索相似度最高的N条记录
		ScoreDoc[] docs = topDocs.scoreDocs;
		// is.search(booleanquery, topCollector);
		// 查询结果的总数量
		// int totalNum = topCollector.getTotalHits();
		int totalNum = topDocs.totalHits;
		int begin = pageSize * (pageIndex - 1);
		int end = Math.min(begin + pageSize, docs.length);
		
		List<ProductIndex> resultList=new ArrayList<ProductIndex>();
		for (int i = begin; i < end; i++) {
			ScoreDoc scdoc = docs[i];
			Document document = is.doc(scdoc.doc);
			ProductIndex index=new ProductIndex();
			index.setProductid(ParseHelper.toLong(document.get("id")));
			index.setTitle(document.get("title"));
			resultList.add(index);
		}
		try {
			reMgr.release(is);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return resultList;
	}

}
