<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-4.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-4.0.xsd" >
    
    <!-- 说明：下面有的Bean配置提供了多种方案，请根据需要采用某一种（别忘了注释掉其他同类方案） -->

	<!-- 自动扫描Spring注解配置 -->
	<context:annotation-config />
	<context:component-scan base-package="com.okwei.*" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<!-- 自动加载属性配置文件 -->
	<bean
		class="com.okwei.util.EncryptPropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" /> 
	</bean>
	

	<!-- 配置数据源：方法一，使用C3P0方式（推荐） -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close" 
		p:driverClass="${jdbc.driverClassName}"
		p:jdbcUrl="${jdbc.url}" 
		p:user="${jdbc.username}" 
		p:password="${jdbc.password}" />
	<bean id="readDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close" 
		p:driverClass="${readjdbc.driverClassName}"
		p:jdbcUrl="${readjdbc.url}" 
		p:user="${readjdbc.username}" 
		p:password="${readjdbc.password}" />

	
      

	<!-- 配置Hibernate的数据源代理工厂：方法二，使用list集合，按文件名搜索匹配的映射文件 -->
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<property name="packagesToScan" value="com.okwei.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>  				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
			</props>
		</property>
	</bean>
	
	<bean id="readSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="readDataSource">
		<property name="packagesToScan" value="com.okwei.model"/>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.autoReconnect">${hibernate.autoReconnect}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
			</props>
		</property>
	</bean>
	<!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />		

	<!-- 配置声明式事务：方法一，在Service实现类或者public实现方法上使用注解@Transactional，则此类或方法就会启用事务机制 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 配置声明式事务：方法二，使用tx/aop命名空间的配置（其实还有方法三，由于快要过时不推荐使用了，这里就不给出方法三的配置了） -->	 

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="Insert*" propagation="REQUIRED" />
			<tx:method name="UP*" propagation="SUPPORTS" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="new*" propagation="REQUIRED" />
			<tx:method name="set*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" read-only="true" />
			<tx:method name="search*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="mypointcut" expression="execution(* com.**.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="mypointcut" />
	</aop:config>	
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate"
		p:sessionFactory-ref="sessionFactory" />
		
	<bean id="readHibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate"
		p:sessionFactory-ref="readSessionFactory" />
		
	<bean id="baseDao"
	  class="com.okwei.dao.impl.BaseDaoImpl">
	  <property name="hibernateTemplate" ref="hibernateTemplate" />
	  <property name="readHibernateTemplate" ref="readHibernateTemplate" />
	 </bean>
	 <bean id="searchService" class="com.okwei.lucene.NearRealTimeSearch" init-method="init" destroy-method="close"></bean>
	 <!--Quartz -->
	<!-- 集成方式：JobDetailFactoryBean，并且任务类需要继承QuartzJobBean -->
	<!-- 定义jobDetail -->
	<bean id="luceneJobDetail"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<!-- durability 表示任务完成之后是否依然保留到数据库，默认false -->
		<property name="durability" value="true" />
		<!-- 目标类/wmuitp/src/test/SpringQuartz.java -->
		<property name="jobClass" value="com.okwei.job.CreateLuceneIndexJob"></property>
		<property name="jobDataAsMap">
			<map>
				<description>jobDataAsMap</description>
				<entry key="jobService" value-ref="jobService" />				
				<entry key="luceneService" value-ref="searchService" />
			</map>
		</property>
	</bean>
	<!-- 另一种触发器是CornTrigger -->
	<bean id="cornTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="luceneJobDetail" />
		<!-- 每个300s触发 -->
		<property name="cronExpression" value="0 0/5 * * * ?" />
	</bean>
	<!-- 定义核心调度器 -->
	<!--  
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<ref bean="cornTrigger" />  
		</property>
	</bean>-->
	
</beans>